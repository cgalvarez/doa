require 'listen'
require 'colorize'

cmd_ssh = "ssh -l <%= @ssh_user %> <%= SSH::OPT_RSYNC %> -i <%= @quotes %><%= @ssh_key %><%= @quotes %>"
cmd_partial_rsync = "rsync -e \"#{ cmd_ssh }\" <%= Sync::OPT_RSYNC %> --log-file <%= @quotes %><%= @from.session.log_rsync %><%= @quotes %>"
ssh_del = "ssh -l <%= @ssh_user %> -i <%= @quotes %><%= @ssh_key %><%= @quotes %> <%= @to.hostname %>"
cmd_glue = <%= @to.os == DOA::OS::WINDOWS ? "'&'" : "'&&'" %>
cmd_mkdir = 'mkdir<%= @to.os == DOA::OS::WINDOWS ? '' : ' -p' %>'

<% if @from.instance.instance_of? DOA::Guest -%>
# Increase the amount of inotify watchers
# See: https://github.com/guard/listen/wiki/Increasing-the-amount-of-inotify-watchers
`echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf && sudo sysctl -p`
<% end -%>
listener = Listen.to("<%= @listen_to.join('","') %>", ignore: [<%= @ignores.uniq.join(',') %>]) do |modified, added, removed|
  (modified + added + removed).compact.each do |path|
    to, excludes = nil, ''
    puts "Added: #{ added }".colorize(:green) if !added.empty?
    puts "Modified: #{ modified }".colorize(:yellow) if !modified.empty?
    puts "Removed: #{ removed }".colorize(:red) if !removed.empty?

<% if !@conditions.empty? and @conditions.is_a?(Hash) -%>
<% else_if = false -%>
<% @conditions.each do |project_path, commands| -%>
<% if !commands.empty? -%>
    <%= else_if ? 'elsif' : 'if' %> path.start_with?('<%= project_path %>')
      <%= commands.join("\n      ") %>
<% else_if = true -%>
<% end -%>
<% end -%>
    end

    # Sync catched FSEvent related resource
    if !to.nil?
      if removed.include?(path)
        # Use SSH instead rsync when removing files/directories
        `#{ ssh_del } 'rm -rf #{ to }'`
      else
        # Force rsync to create remote path
        # See http://www.schwertly.com/2013/07/forcing-rsync-to-create-a-remote-path-using-rsync-path/
        `#{ cmd_partial_rsync } --rsync-path='#{ cmd_mkdir } #{ dir } #{ cmd_glue } rsync' #{ from } <%= @rsync_user %>@<%= @to.hostname %>:#{ to }`
      end
    end
  end
<% end -%>
end

# Start listening (...and ignoring!)
listener.start
sleep
